{"version":3,"sources":["types/TypeError.ts","types/FieldType.ts","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/InputField.tsx","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["TypeError","FieldType","PostsList","visiblePosts","selectedPost","onOpen","toggleShowPost","post","id","className","map","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","InputField","inputType","newComment","onChange","emptyValueError","setEmptyValueError","inputHandler","event","target","value","Name","htmlFor","name","placeholder","Email","NewCommentForm","addingComment","postId","isError","setIsError","useState","isProcessed","setIsProcessed","email","setNewComment","isErrorEmptyName","setIsErrorEmptyName","isErrorEmptyEmail","setIsErrorEmptyEmail","isErrorEmptyText","setIsErrorEmptyText","onSubmit","preventDefault","trim","addedComment","catch","AddComment","finally","Text","PostDetails","isLoading","setIsLoading","comments","setComments","isFormAddComment","setIsFormAddComment","commentIdWithError","setCommentIdWithError","comment","a","deleteHandler","commentId","currentComments","filter","deleteComment","DeleteComment","useEffect","loadedComments","LoadComments","length","href","Unexpected","UserSelector","users","selectedUser","selectUser","isDropdown","setIsDropdown","selectingUser","user","role","App","setUsers","setSelectedUser","setVisiblePosts","setSelectedPost","uploadedUsers","Error","LoadUsers","selectedUserHandler","userId","posts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.972847c5.chunk.js","sourcesContent":["export enum TypeError {\n  Unexpected = 'Unexpected error',\n  AddComment = 'Unable to add a comment',\n  DeleteComment = 'Unable to delete a comment',\n  LoadUsers = 'Unable to load users',\n  LoadComments = 'Unable to load comments',\n}\n","export enum FieldType {\n  Name = 'name',\n  Email = 'email',\n  Text = 'body',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  visiblePosts: Post[],\n  selectedPost: Post | null,\n  onOpen: React.Dispatch<React.SetStateAction<Post | null>>,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  visiblePosts,\n  selectedPost,\n  onOpen,\n}) => {\n  const toggleShowPost = (post: Post) => () => {\n    if (selectedPost && selectedPost.id === post.id) {\n      onOpen(null);\n    } else {\n      onOpen(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table\n        className=\"table is-fullwidth is-striped is-hoverable is-narrow\"\n      >\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visiblePosts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    {\n                      'is-light': !selectedPost || selectedPost.id !== post.id,\n                    },\n                  )}\n                  onClick={toggleShowPost(post)}\n                >\n                  {selectedPost && selectedPost.id === post.id\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { FieldType } from '../types/FieldType';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  inputType: FieldType,\n  newComment: CommentData,\n  onChange: React.Dispatch<React.SetStateAction<CommentData>>,\n  emptyValueError: boolean,\n  setEmptyValueError: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const InputField: React.FC<Props> = ({\n  inputType,\n  newComment,\n  onChange,\n  emptyValueError,\n  setEmptyValueError,\n}) => {\n  const inputHandler = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    if (emptyValueError) {\n      setEmptyValueError(false);\n    }\n\n    onChange({\n      ...newComment,\n      [inputType]: event.target.value,\n    });\n  };\n\n  switch (inputType) {\n    case FieldType.Name:\n      return (\n        <div className=\"field\" data-cy=\"NameField\">\n          <label className=\"label\" htmlFor=\"comment-author-name\">\n            Author Name\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"comment-author-name\"\n              placeholder=\"Name Surname\"\n              className={classNames(\n                'input',\n                { 'is-danger': emptyValueError },\n              )}\n              value={newComment[inputType]}\n              onChange={inputHandler}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n\n            {emptyValueError && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n          </div>\n\n          {emptyValueError && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              {`${inputType} is required`}\n            </p>\n          )}\n        </div>\n      );\n\n    case FieldType.Email:\n      return (\n        <div className=\"field\" data-cy=\"EmailField\">\n          <label className=\"label\" htmlFor=\"comment-author-email\">\n            Author Email\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"email\"\n              id=\"comment-author-email\"\n              placeholder=\"email@test.com\"\n              className={classNames(\n                'input',\n                { 'is-danger': emptyValueError },\n              )}\n              value={newComment[inputType]}\n              onChange={inputHandler}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-envelope\" />\n            </span>\n\n            {emptyValueError && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n          </div>\n\n          {emptyValueError && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Email is required\n            </p>\n          )}\n        </div>\n      );\n\n    default:\n      return (\n        <div className=\"field\" data-cy=\"BodyField\">\n          <label className=\"label\" htmlFor=\"comment-body\">\n            Comment Text\n          </label>\n\n          <div className=\"control\">\n            <textarea\n              id=\"comment-body\"\n              name=\"body\"\n              placeholder=\"Type comment here\"\n              className={classNames(\n                'textarea',\n                { 'is-danger': emptyValueError },\n              )}\n              value={newComment[inputType]}\n              onChange={inputHandler}\n            />\n          </div>\n\n          {emptyValueError && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Enter some text\n            </p>\n          )}\n        </div>\n      );\n  }\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Comment } from '../types/Comment';\nimport { TypeError } from '../types/TypeError';\nimport { FieldType } from '../types/FieldType';\nimport { createComment } from '../api/comments';\nimport { InputField } from './InputField';\n\ntype Props = {\n  addingComment: (comment: Comment) => Promise<void>,\n  postId: number,\n  isError: string,\n  setIsError: React.Dispatch<React.SetStateAction<string>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  addingComment,\n  postId,\n  isError,\n  setIsError,\n}) => {\n  const [isProcessed, setIsProcessed] = useState(false);\n  const [newComment, setNewComment] = useState({\n    postId,\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [isErrorEmptyName, setIsErrorEmptyName] = useState(false);\n  const [isErrorEmptyEmail, setIsErrorEmptyEmail] = useState(false);\n  const [isErrorEmptyText, setIsErrorEmptyText] = useState(false);\n\n  const addCommentHandler = (\n    event: React.FormEvent<HTMLFormElement>,\n  ) => {\n    event.preventDefault();\n    setIsError('');\n    if (newComment.name.trim()\n      && newComment.email.trim()\n      && newComment.body.trim()) {\n      setIsProcessed(true);\n      createComment(newComment)\n        .then((addedComment) => {\n          addingComment(addedComment);\n          setNewComment({\n            ...newComment,\n            body: '',\n          });\n        })\n        .catch(() => {\n          setIsError(TypeError.AddComment);\n        })\n        .finally(() => setIsProcessed(false));\n    } else {\n      if (!newComment.name.trim()) {\n        setIsErrorEmptyName(true);\n      }\n\n      if (!newComment.email.trim()) {\n        setIsErrorEmptyEmail(true);\n      }\n\n      if (!newComment.body.trim()) {\n        setIsErrorEmptyText(true);\n      }\n    }\n  };\n\n  const clearFormHandler = () => {\n    setIsError('');\n    setNewComment({\n      postId,\n      name: '',\n      email: '',\n      body: '',\n    });\n    setIsErrorEmptyName(false);\n    setIsErrorEmptyEmail(false);\n    setIsErrorEmptyText(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={addCommentHandler}\n    >\n      <InputField\n        inputType={FieldType.Name}\n        newComment={newComment}\n        onChange={setNewComment}\n        emptyValueError={isErrorEmptyName}\n        setEmptyValueError={setIsErrorEmptyName}\n      />\n      <InputField\n        inputType={FieldType.Email}\n        newComment={newComment}\n        onChange={setNewComment}\n        emptyValueError={isErrorEmptyEmail}\n        setEmptyValueError={setIsErrorEmptyEmail}\n      />\n      <InputField\n        inputType={FieldType.Text}\n        newComment={newComment}\n        onChange={setNewComment}\n        emptyValueError={isErrorEmptyText}\n        setEmptyValueError={setIsErrorEmptyText}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isProcessed },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearFormHandler}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n\n      {isError === TypeError.AddComment && (\n        <div className=\"notification is-danger\">\n          {TypeError.AddComment}\n        </div>\n      )}\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment, CommentData } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { TypeError } from '../types/TypeError';\nimport { getComments, deleteComment } from '../api/comments';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isError, setIsError] = useState('');\n  const [isFormAddComment, setIsFormAddComment] = useState(false);\n  const [commentIdWithError, setCommentIdWithError]\n  = useState<number | null>(null);\n\n  const addingComment = async (comment: Comment) => {\n    setComments([...comments, comment]);\n  };\n\n  const onWriteComment = () => {\n    setIsError('');\n    setCommentIdWithError(null);\n    setIsFormAddComment(true);\n  };\n\n  const deleteHandler = (commentId: number) => () => {\n    const currentComments = comments;\n\n    setIsError('');\n    setCommentIdWithError(null);\n    setComments(comments.filter(comment => comment.id !== commentId));\n    deleteComment(commentId)\n      .catch(() => {\n        setComments(currentComments);\n        setCommentIdWithError(commentId);\n        setIsError(TypeError.DeleteComment);\n      });\n  };\n\n  useEffect(() => {\n    setIsFormAddComment(false);\n    setComments([]);\n    setIsLoading(true);\n    setIsError('');\n    getComments(post.id)\n      .then((loadedComments) => setComments(loadedComments))\n      .catch(() => setIsError(TypeError.LoadComments))\n      .finally(() => setIsLoading(false));\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {isError === TypeError.LoadComments && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {TypeError.LoadComments}\n            </div>\n          )}\n\n          {!comments.length && !isLoading && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!!comments.length && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  {isError === TypeError.DeleteComment\n                  && commentIdWithError === comment.id\n                  && (\n                    <div>\n                      <p className=\"help is-danger\">\n                        {TypeError.DeleteComment}\n                      </p>\n                    </div>\n                  )}\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${comment.email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={deleteHandler(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isLoading\n          && isError !== TypeError.Unexpected\n          && !isFormAddComment\n          && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={onWriteComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormAddComment && (\n          <NewCommentForm\n            addingComment={addingComment}\n            postId={post.id}\n            isError={isError}\n            setIsError={setIsError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[] | null,\n  selectedUser: User | null,\n  selectUser: (user: User) => Promise<void>,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  selectUser,\n}) => {\n  const [isDropdown, setIsDropdown] = useState(false);\n\n  const selectingUser = (user: User) => () => {\n    selectUser(user);\n    setIsDropdown(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isDropdown },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdown(!isDropdown)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users && users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': selectedUser && selectedUser.id === user.id },\n              )}\n              key={user.id}\n              onClick={selectingUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { TypeError } from './types/TypeError';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [visiblePosts, setVisiblePosts] = useState<Post[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(uploadedUsers => setUsers(uploadedUsers))\n      .catch(() => {\n        throw new Error(TypeError.LoadUsers);\n      });\n  }, []);\n\n  const selectedUserHandler = async (user: User) => {\n    setIsError(false);\n    setVisiblePosts(null);\n    setSelectedPost(null);\n    setSelectedUser(user);\n    setIsLoading(true);\n    const posts = await getPosts(user.id)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n\n    if (posts && posts.length) {\n      setVisiblePosts(posts);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  selectUser={selectedUserHandler}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUser ? (\n                  <>\n                    {isLoading && <Loader />}\n                    {isError && !isLoading && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong!\n                      </div>\n                    )}\n\n                    {visiblePosts && (\n                      <PostsList\n                        visiblePosts={visiblePosts}\n                        selectedPost={selectedPost}\n                        onOpen={setSelectedPost}\n                      />\n                    )}\n                    {!visiblePosts && !isLoading && !isError && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n                  </>\n\n                ) : (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}