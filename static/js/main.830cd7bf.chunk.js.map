{"version":3,"sources":["types/TypeError.ts","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["TypeError","PostsList","visiblePosts","selectedPost","onOpen","toggleShowPost","post","id","className","map","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","TypeInput","client","NewCommentForm","addingComment","postId","isError","setIsError","useState","isProcessed","setIsProcessed","authorName","setAuthorName","authorEmail","setAuthorEmail","commentText","setCommentText","emptyName","setEmptyName","emptyEmail","setEmptyEmail","emptyText","setEmptyText","inputHandler","inputName","event","typeEmptyInput","setEmptyInput","setValueInput","Name","Email","target","value","addCommentHandler","a","preventDefault","name","email","addedComment","catch","Add","finally","trim","onSubmit","htmlFor","placeholder","onChange","Text","PostDetails","isLoading","setIsLoading","comments","setComments","isFormAddComment","setIsFormAddComment","commentIdWithError","setCommentIdWithError","comment","deleteHandler","commentId","currentComments","filter","deleteComment","Delete","useEffect","loadedComments","Unexpected","length","href","UserSelector","users","selectedUser","selectUser","isDropdown","setIsDropdown","selectingUser","user","role","App","setUsers","setSelectedUser","setVisiblePosts","setSelectedPost","uploadedUsers","Error","selectedUserHandler","userId","posts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.830cd7bf.chunk.js","sourcesContent":["export enum TypeError {\n  Unexpected = 'Unexpected error',\n  Add = 'Unable to add a comment',\n  Delete = 'Unable to delete a comment',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  visiblePosts: Post[],\n  selectedPost: Post | null,\n  onOpen: React.Dispatch<React.SetStateAction<Post | null>>,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  visiblePosts,\n  selectedPost,\n  onOpen,\n}) => {\n  const toggleShowPost = (post: Post) => () => {\n    if (selectedPost && selectedPost.id === post.id) {\n      onOpen(null);\n    } else {\n      onOpen(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visiblePosts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    {\n                      'is-light': !selectedPost || selectedPost.id !== post.id,\n                    },\n                  )}\n                  onClick={toggleShowPost(post)}\n                >\n                  {selectedPost && selectedPost.id === post.id\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Comment } from '../types/Comment';\nimport { TypeError } from '../types/TypeError';\nimport { createComment } from '../api/comments';\n\nenum TypeInput {\n  Name,\n  Email,\n  Text,\n}\n\ntype Props = {\n  addingComment: (comment: Comment) => Promise<void>,\n  postId: number,\n  isError: string,\n  setIsError: React.Dispatch<React.SetStateAction<string>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  addingComment,\n  postId,\n  isError,\n  setIsError,\n}) => {\n  const [isProcessed, setIsProcessed] = useState(false);\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [emptyName, setEmptyName] = useState(false);\n  const [emptyEmail, setEmptyEmail] = useState(false);\n  const [emptyText, setEmptyText] = useState(false);\n\n  const inputHandler = (inputName: TypeInput) => {\n    return (\n      event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n    ) => {\n      let typeEmptyInput;\n      let setEmptyInput;\n      let setValueInput;\n\n      switch (inputName) {\n        case TypeInput.Name:\n          typeEmptyInput = emptyName;\n          setEmptyInput = setEmptyName;\n          setValueInput = setAuthorName;\n          break;\n\n        case TypeInput.Email:\n          typeEmptyInput = emptyEmail;\n          setEmptyInput = setEmptyEmail;\n          setValueInput = setAuthorEmail;\n          break;\n\n        default:\n          typeEmptyInput = emptyText;\n          setEmptyInput = setEmptyText;\n          setValueInput = setCommentText;\n          break;\n      }\n\n      if (typeEmptyInput) {\n        setEmptyInput(false);\n      }\n\n      if (isError) {\n        setIsError('');\n      }\n\n      setValueInput(event.target.value);\n    };\n  };\n\n  const addCommentHandler = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsError('');\n    if (authorName && authorEmail && commentText) {\n      setIsProcessed(true);\n      const newComment = {\n        postId,\n        name: authorName,\n        email: authorEmail,\n        body: commentText,\n      };\n\n      createComment(newComment)\n        .then((addedComment) => {\n          addingComment(addedComment);\n          setCommentText('');\n        })\n        .catch(() => {\n          setIsError(TypeError.Add);\n        })\n        .finally(() => setIsProcessed(false));\n    } else {\n      if (!authorName.trim()) {\n        setEmptyName(true);\n      }\n\n      if (!authorEmail.trim()) {\n        setEmptyEmail(true);\n      }\n\n      if (!commentText.trim()) {\n        setEmptyText(true);\n      }\n    }\n  };\n\n  const clearFormHandler = () => {\n    setIsError('');\n    setEmptyName(false);\n    setAuthorName('');\n    setEmptyEmail(false);\n    setAuthorEmail('');\n    setEmptyText(false);\n    setCommentText('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={addCommentHandler}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': emptyName },\n            )}\n            value={authorName}\n            onChange={inputHandler(TypeInput.Name)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {emptyName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emptyName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': emptyEmail },\n            )}\n            value={authorEmail}\n            onChange={inputHandler(TypeInput.Email)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emptyEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emptyEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': emptyText },\n            )}\n            value={commentText}\n            onChange={inputHandler(TypeInput.Text)}\n          />\n        </div>\n\n        {emptyText && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isProcessed },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearFormHandler}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n\n      {isError === TypeError.Add && (\n        <div className=\"notification is-danger\">\n          {TypeError.Add}\n        </div>\n      )}\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment, CommentData } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { TypeError } from '../types/TypeError';\nimport { getComments, deleteComment } from '../api/comments';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isError, setIsError] = useState('');\n  const [isFormAddComment, setIsFormAddComment] = useState(false);\n  const [commentIdWithError, setCommentIdWithError]\n  = useState<number | null>(null);\n\n  const addingComment = async (comment: Comment) => {\n    setComments([...comments, comment]);\n  };\n\n  const onWriteComment = () => {\n    setIsError('');\n    setCommentIdWithError(null);\n    setIsFormAddComment(true);\n  };\n\n  const deleteHandler = (commentId: number) => () => {\n    const currentComments = comments;\n\n    setIsError('');\n    setCommentIdWithError(null);\n    setComments(comments.filter(comment => comment.id !== commentId));\n    deleteComment(commentId)\n      .catch(() => {\n        setComments(currentComments);\n        setCommentIdWithError(commentId);\n        setIsError(TypeError.Delete);\n      });\n  };\n\n  useEffect(() => {\n    setIsFormAddComment(false);\n    setComments([]);\n    setIsLoading(true);\n    setIsError('');\n    getComments(post.id)\n      .then((loadedComments) => setComments(loadedComments))\n      .catch(() => setIsError(TypeError.Unexpected))\n      .finally(() => setIsLoading(false));\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {isError === TypeError.Unexpected && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  {isError === TypeError.Delete\n                  && commentIdWithError === comment.id\n                  && (\n                    <div>\n                      <p className=\"help is-danger\">\n                        {TypeError.Delete}\n                      </p>\n                    </div>\n                  )}\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={deleteHandler(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isLoading\n          && isError !== TypeError.Unexpected\n          && !isFormAddComment\n          && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={onWriteComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormAddComment && (\n          <NewCommentForm\n            addingComment={addingComment}\n            postId={post.id}\n            isError={isError}\n            setIsError={setIsError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[] | null,\n  selectedUser: User | null,\n  selectUser: (user: User) => Promise<void>,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  selectUser,\n}) => {\n  const [isDropdown, setIsDropdown] = useState(false);\n\n  const selectingUser = (user: User) => () => {\n    selectUser(user);\n    setIsDropdown(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isDropdown },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdown(!isDropdown)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users && users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': selectedUser && selectedUser.id === user.id },\n              )}\n              key={user.id}\n              onClick={selectingUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [visiblePosts, setVisiblePosts] = useState<Post[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(uploadedUsers => setUsers(uploadedUsers))\n      .catch(() => {\n        throw new Error('unable to load users');\n      });\n  }, []);\n\n  const selectedUserHandler = async (user: User) => {\n    setIsError(false);\n    setVisiblePosts(null);\n    setSelectedPost(null);\n    setSelectedUser(user);\n    setIsLoading(true);\n    const posts = await getPosts(user.id)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n\n    if (posts && posts.length > 0) {\n      setVisiblePosts(posts);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  selectUser={selectedUserHandler}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUser ? (\n                  <>\n                    {isLoading && <Loader />}\n                    {isError && !isLoading && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong!\n                      </div>\n                    )}\n\n                    {visiblePosts && (\n                      <PostsList\n                        visiblePosts={visiblePosts}\n                        selectedPost={selectedPost}\n                        onOpen={setSelectedPost}\n                      />\n                    )}\n                    {!visiblePosts && !isLoading && !isError && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n                  </>\n\n                ) : (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}